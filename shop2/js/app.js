const products = [
    { id: 1, name: "iPhone 15 Pro", description: "–ù–∞–π–Ω–æ–≤—ñ—à–∏–π iPhone –∑ –ø–æ—Ç—É–∂–Ω–∏–º –ø—Ä–æ—Ü–µ—Å–æ—Ä–æ–º A17 Pro", price: 45000, category: "phones", emoji: "üì±" },
    { id: 2, name: "Samsung Galaxy S24", description: "–§–ª–∞–≥–º–∞–Ω—Å—å–∫–∏–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω Samsung –∑ AI —Ñ—É–Ω–∫—Ü—ñ—è–º–∏", price: 35000, category: "phones", emoji: "üì±" },
    { id: 3, name: "MacBook Pro M3", description: "–ü–æ—Ç—É–∂–Ω–∏–π –Ω–æ—É—Ç–±—É–∫ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª—ñ–≤", price: 85000, category: "laptops", emoji: "üíª" },
    { id: 4, name: "Dell XPS 13", description: "–ö–æ–º–ø–∞–∫—Ç–Ω–∏–π —Ç–∞ –ø–æ—Ç—É–∂–Ω–∏–π –Ω–æ—É—Ç–±—É–∫ –¥–ª—è —Ä–æ–±–æ—Ç–∏", price: 55000, category: "laptops", emoji: "üíª" },
    { id: 5, name: "AirPods Pro", description: "–ë–µ–∑–¥—Ä–æ—Ç–æ–≤—ñ –Ω–∞–≤—É—à–Ω–∏–∫–∏ –∑ –∞–∫—Ç–∏–≤–Ω–∏–º —à—É–º–æ–∑–∞–≥–ª—É—à–µ–Ω–Ω—è–º", price: 8500, category: "accessories", emoji: "üéß" },
    { id: 6, name: "iPad Air", description: "–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω—à–µ—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ —Ç–∞ —Ä–æ–∑–≤–∞–≥", price: 25000, category: "accessories", emoji: "üì±" },
    { id: 7, name: "Apple Watch Ultra", description: "–ù–∞–π–ø–æ—Ç—É–∂–Ω—ñ—à–∏–π —Ä–æ–∑—É–º–Ω–∏–π –≥–æ–¥–∏–Ω–Ω–∏–∫ Apple", price: 32000, category: "accessories", emoji: "‚åö" },
    { id: 8, name: "Google Pixel 8", description: "–°–º–∞—Ä—Ç—Ñ–æ–Ω Google –∑ –Ω–∞–π–∫—Ä–∞—â–æ—é –∫–∞–º–µ—Ä–æ—é", price: 28000, category: "phones", emoji: "üì±" }
  ];

  let cart = [];
  let currentFilter = 'all';

  function initStore() {
    renderProducts();
    updateCartCount();
  }

  function renderProducts() {
    const grid = document.getElementById('productsGrid');
    const filteredProducts = currentFilter === 'all'
      ? products
      : products.filter(p => p.category === currentFilter);

    grid.innerHTML = filteredProducts.map(product => `
      <div class="product-card">
        <div class="product-image">${product.emoji}</div>
        <div class="product-info">
          <h3 class="product-title">${product.name}</h3>
          <p class="product-description">${product.description}</p>
          <div class="product-price">${product.price.toLocaleString()} –≥—Ä–Ω</div>
          <button class="add-to-cart" onclick="addToCart(${product.id})">–î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞</button>
        </div>
      </div>
    `).join('');
  }

  function filterProducts(category, event) {
    currentFilter = category;
    document.querySelectorAll('.filter-btn').forEach(btn => {
      btn.classList.remove('active');
    });
    event.target.classList.add('active');
    renderProducts();
  }

  function addToCart(productId) {
    const product = products.find(p => p.id === productId);
    const existingItem = cart.find(item => item.id === productId);
    if (existingItem) {
      existingItem.quantity += 1;
    } else {
      cart.push({ ...product, quantity: 1 });
    }
    updateCartCount();
    showAddedToCartAnimation();
  }

  function updateCartCount() {
    const count = cart.reduce((total, item) => total + item.quantity, 0);
    document.getElementById('cartCount').textContent = count;
  }

  function toggleCart() {
    const modal = document.getElementById('cartModal');
    if (modal.style.display === 'block') {
      modal.style.display = 'none';
    } else {
      modal.style.display = 'block';
      renderCart();
    }
  }

  function renderCart() {
    const cartItems = document.getElementById('cartItems');
    const cartTotal = document.getElementById('cartTotal');

    if (cart.length === 0) {
      cartItems.innerHTML = '<p style="text-align: center; color: #666;">–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π</p>';
      cartTotal.innerHTML = '–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: 0 –≥—Ä–Ω';
      return;
    }

    cartItems.innerHTML = cart.map(item => `
      <div class="cart-item">
        <div>
          <h4>${item.name}</h4>
          <p>${item.price.toLocaleString()} –≥—Ä–Ω √ó ${item.quantity}</p>
        </div>
        <div>
          <button onclick="changeQuantity(${item.id}, -1)" style="background: #ff4757; color: white; border: none; padding: 5px 10px; border-radius: 5px; cursor: pointer;">-</button>
          <span style="margin: 0 10px;">${item.quantity}</span>
          <button onclick="changeQuantity(${item.id}, 1)" style="background: #28a745; color: white; border: none; padding: 5px 10px; border-radius: 5px; cursor: pointer;">+</button>
        </div>
      </div>
    `).join('');

    const total = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    cartTotal.innerHTML = `–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: ${total.toLocaleString()} –≥—Ä–Ω`;
  }

  function changeQuantity(productId, delta) {
    const item = cart.find(item => item.id === productId);
    if (item) {
      item.quantity += delta;
      if (item.quantity <= 0) {
        cart = cart.filter(cartItem => cartItem.id !== productId);
      }
      updateCartCount();
      renderCart();
    }
  }

  function checkout() {
    if (cart.length === 0) {
      alert("–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π!");
      return;
    }
    const total = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    alert(`–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: ${total.toLocaleString()} –≥—Ä–Ω\n\n–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.`);
    cart = [];
    updateCartCount();
    toggleCart();
  }

  function showAddedToCartAnimation() {
    const cartBtn = document.querySelector('.cart-btn');
    cartBtn.style.transform = 'scale(1.1)';
    cartBtn.style.background = 'rgba(40, 167, 69, 0.8)';
    setTimeout(() => {
      cartBtn.style.transform = 'scale(1)';
      cartBtn.style.background = 'rgba(255,255,255,0.2)';
    }, 200);
  }

  document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
      e.preventDefault();
      const target = document.querySelector(this.getAttribute('href'));
      if (target) {
        target.scrollIntoView({ behavior: 'smooth', block: 'start' });
      }
    });
  });

  document.getElementById('cartModal').addEventListener('click', function (e) {
    if (e.target === this) {
      toggleCart();
    }
  });

  window.addEventListener('load', initStore);